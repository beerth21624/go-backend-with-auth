// Code generated by mockery v2.53.4. DO NOT EDIT.

package password

import (
	password "beerdosan-backend/internal/pkg/password"

	mock "github.com/stretchr/testify/mock"
)

// MockPasswordService is an autogenerated mock type for the PasswordService type
type MockPasswordService struct {
	mock.Mock
}

type MockPasswordService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPasswordService) EXPECT() *MockPasswordService_Expecter {
	return &MockPasswordService_Expecter{mock: &_m.Mock}
}

// CheckPasswordStrength provides a mock function with given fields: _a0
func (_m *MockPasswordService) CheckPasswordStrength(_a0 string) password.PasswordStrength {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CheckPasswordStrength")
	}

	var r0 password.PasswordStrength
	if rf, ok := ret.Get(0).(func(string) password.PasswordStrength); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(password.PasswordStrength)
	}

	return r0
}

// MockPasswordService_CheckPasswordStrength_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPasswordStrength'
type MockPasswordService_CheckPasswordStrength_Call struct {
	*mock.Call
}

// CheckPasswordStrength is a helper method to define mock.On call
//   - _a0 string
func (_e *MockPasswordService_Expecter) CheckPasswordStrength(_a0 interface{}) *MockPasswordService_CheckPasswordStrength_Call {
	return &MockPasswordService_CheckPasswordStrength_Call{Call: _e.mock.On("CheckPasswordStrength", _a0)}
}

func (_c *MockPasswordService_CheckPasswordStrength_Call) Run(run func(_a0 string)) *MockPasswordService_CheckPasswordStrength_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPasswordService_CheckPasswordStrength_Call) Return(_a0 password.PasswordStrength) *MockPasswordService_CheckPasswordStrength_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPasswordService_CheckPasswordStrength_Call) RunAndReturn(run func(string) password.PasswordStrength) *MockPasswordService_CheckPasswordStrength_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateRandomPassword provides a mock function with given fields: length, includeSymbols
func (_m *MockPasswordService) GenerateRandomPassword(length int, includeSymbols bool) (string, error) {
	ret := _m.Called(length, includeSymbols)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRandomPassword")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int, bool) (string, error)); ok {
		return rf(length, includeSymbols)
	}
	if rf, ok := ret.Get(0).(func(int, bool) string); ok {
		r0 = rf(length, includeSymbols)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int, bool) error); ok {
		r1 = rf(length, includeSymbols)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPasswordService_GenerateRandomPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRandomPassword'
type MockPasswordService_GenerateRandomPassword_Call struct {
	*mock.Call
}

// GenerateRandomPassword is a helper method to define mock.On call
//   - length int
//   - includeSymbols bool
func (_e *MockPasswordService_Expecter) GenerateRandomPassword(length interface{}, includeSymbols interface{}) *MockPasswordService_GenerateRandomPassword_Call {
	return &MockPasswordService_GenerateRandomPassword_Call{Call: _e.mock.On("GenerateRandomPassword", length, includeSymbols)}
}

func (_c *MockPasswordService_GenerateRandomPassword_Call) Run(run func(length int, includeSymbols bool)) *MockPasswordService_GenerateRandomPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(bool))
	})
	return _c
}

func (_c *MockPasswordService_GenerateRandomPassword_Call) Return(_a0 string, _a1 error) *MockPasswordService_GenerateRandomPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPasswordService_GenerateRandomPassword_Call) RunAndReturn(run func(int, bool) (string, error)) *MockPasswordService_GenerateRandomPassword_Call {
	_c.Call.Return(run)
	return _c
}

// HashPassword provides a mock function with given fields: plainPassword
func (_m *MockPasswordService) HashPassword(plainPassword string) (password.HashedPassword, error) {
	ret := _m.Called(plainPassword)

	if len(ret) == 0 {
		panic("no return value specified for HashPassword")
	}

	var r0 password.HashedPassword
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (password.HashedPassword, error)); ok {
		return rf(plainPassword)
	}
	if rf, ok := ret.Get(0).(func(string) password.HashedPassword); ok {
		r0 = rf(plainPassword)
	} else {
		r0 = ret.Get(0).(password.HashedPassword)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(plainPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPasswordService_HashPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashPassword'
type MockPasswordService_HashPassword_Call struct {
	*mock.Call
}

// HashPassword is a helper method to define mock.On call
//   - plainPassword string
func (_e *MockPasswordService_Expecter) HashPassword(plainPassword interface{}) *MockPasswordService_HashPassword_Call {
	return &MockPasswordService_HashPassword_Call{Call: _e.mock.On("HashPassword", plainPassword)}
}

func (_c *MockPasswordService_HashPassword_Call) Run(run func(plainPassword string)) *MockPasswordService_HashPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPasswordService_HashPassword_Call) Return(_a0 password.HashedPassword, _a1 error) *MockPasswordService_HashPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPasswordService_HashPassword_Call) RunAndReturn(run func(string) (password.HashedPassword, error)) *MockPasswordService_HashPassword_Call {
	_c.Call.Return(run)
	return _c
}

// HashPasswordWithArgon2 provides a mock function with given fields: plainPassword
func (_m *MockPasswordService) HashPasswordWithArgon2(plainPassword string) (string, error) {
	ret := _m.Called(plainPassword)

	if len(ret) == 0 {
		panic("no return value specified for HashPasswordWithArgon2")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(plainPassword)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(plainPassword)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(plainPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPasswordService_HashPasswordWithArgon2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashPasswordWithArgon2'
type MockPasswordService_HashPasswordWithArgon2_Call struct {
	*mock.Call
}

// HashPasswordWithArgon2 is a helper method to define mock.On call
//   - plainPassword string
func (_e *MockPasswordService_Expecter) HashPasswordWithArgon2(plainPassword interface{}) *MockPasswordService_HashPasswordWithArgon2_Call {
	return &MockPasswordService_HashPasswordWithArgon2_Call{Call: _e.mock.On("HashPasswordWithArgon2", plainPassword)}
}

func (_c *MockPasswordService_HashPasswordWithArgon2_Call) Run(run func(plainPassword string)) *MockPasswordService_HashPasswordWithArgon2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPasswordService_HashPasswordWithArgon2_Call) Return(_a0 string, _a1 error) *MockPasswordService_HashPasswordWithArgon2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPasswordService_HashPasswordWithArgon2_Call) RunAndReturn(run func(string) (string, error)) *MockPasswordService_HashPasswordWithArgon2_Call {
	_c.Call.Return(run)
	return _c
}

// IsCommonPassword provides a mock function with given fields: _a0
func (_m *MockPasswordService) IsCommonPassword(_a0 string) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IsCommonPassword")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPasswordService_IsCommonPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCommonPassword'
type MockPasswordService_IsCommonPassword_Call struct {
	*mock.Call
}

// IsCommonPassword is a helper method to define mock.On call
//   - _a0 string
func (_e *MockPasswordService_Expecter) IsCommonPassword(_a0 interface{}) *MockPasswordService_IsCommonPassword_Call {
	return &MockPasswordService_IsCommonPassword_Call{Call: _e.mock.On("IsCommonPassword", _a0)}
}

func (_c *MockPasswordService_IsCommonPassword_Call) Run(run func(_a0 string)) *MockPasswordService_IsCommonPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPasswordService_IsCommonPassword_Call) Return(_a0 bool) *MockPasswordService_IsCommonPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPasswordService_IsCommonPassword_Call) RunAndReturn(run func(string) bool) *MockPasswordService_IsCommonPassword_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePassword provides a mock function with given fields: _a0
func (_m *MockPasswordService) ValidatePassword(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPasswordService_ValidatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePassword'
type MockPasswordService_ValidatePassword_Call struct {
	*mock.Call
}

// ValidatePassword is a helper method to define mock.On call
//   - _a0 string
func (_e *MockPasswordService_Expecter) ValidatePassword(_a0 interface{}) *MockPasswordService_ValidatePassword_Call {
	return &MockPasswordService_ValidatePassword_Call{Call: _e.mock.On("ValidatePassword", _a0)}
}

func (_c *MockPasswordService_ValidatePassword_Call) Run(run func(_a0 string)) *MockPasswordService_ValidatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPasswordService_ValidatePassword_Call) Return(_a0 error) *MockPasswordService_ValidatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPasswordService_ValidatePassword_Call) RunAndReturn(run func(string) error) *MockPasswordService_ValidatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyArgon2Password provides a mock function with given fields: hashedPassword, plainPassword
func (_m *MockPasswordService) VerifyArgon2Password(hashedPassword string, plainPassword string) bool {
	ret := _m.Called(hashedPassword, plainPassword)

	if len(ret) == 0 {
		panic("no return value specified for VerifyArgon2Password")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(hashedPassword, plainPassword)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPasswordService_VerifyArgon2Password_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyArgon2Password'
type MockPasswordService_VerifyArgon2Password_Call struct {
	*mock.Call
}

// VerifyArgon2Password is a helper method to define mock.On call
//   - hashedPassword string
//   - plainPassword string
func (_e *MockPasswordService_Expecter) VerifyArgon2Password(hashedPassword interface{}, plainPassword interface{}) *MockPasswordService_VerifyArgon2Password_Call {
	return &MockPasswordService_VerifyArgon2Password_Call{Call: _e.mock.On("VerifyArgon2Password", hashedPassword, plainPassword)}
}

func (_c *MockPasswordService_VerifyArgon2Password_Call) Run(run func(hashedPassword string, plainPassword string)) *MockPasswordService_VerifyArgon2Password_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockPasswordService_VerifyArgon2Password_Call) Return(_a0 bool) *MockPasswordService_VerifyArgon2Password_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPasswordService_VerifyArgon2Password_Call) RunAndReturn(run func(string, string) bool) *MockPasswordService_VerifyArgon2Password_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyPassword provides a mock function with given fields: hashedPassword, plainPassword
func (_m *MockPasswordService) VerifyPassword(hashedPassword password.HashedPassword, plainPassword string) bool {
	ret := _m.Called(hashedPassword, plainPassword)

	if len(ret) == 0 {
		panic("no return value specified for VerifyPassword")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(password.HashedPassword, string) bool); ok {
		r0 = rf(hashedPassword, plainPassword)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPasswordService_VerifyPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyPassword'
type MockPasswordService_VerifyPassword_Call struct {
	*mock.Call
}

// VerifyPassword is a helper method to define mock.On call
//   - hashedPassword password.HashedPassword
//   - plainPassword string
func (_e *MockPasswordService_Expecter) VerifyPassword(hashedPassword interface{}, plainPassword interface{}) *MockPasswordService_VerifyPassword_Call {
	return &MockPasswordService_VerifyPassword_Call{Call: _e.mock.On("VerifyPassword", hashedPassword, plainPassword)}
}

func (_c *MockPasswordService_VerifyPassword_Call) Run(run func(hashedPassword password.HashedPassword, plainPassword string)) *MockPasswordService_VerifyPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(password.HashedPassword), args[1].(string))
	})
	return _c
}

func (_c *MockPasswordService_VerifyPassword_Call) Return(_a0 bool) *MockPasswordService_VerifyPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPasswordService_VerifyPassword_Call) RunAndReturn(run func(password.HashedPassword, string) bool) *MockPasswordService_VerifyPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPasswordService creates a new instance of MockPasswordService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPasswordService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPasswordService {
	mock := &MockPasswordService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
