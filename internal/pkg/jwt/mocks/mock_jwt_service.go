// Code generated by mockery v2.53.4. DO NOT EDIT.

package jwt

import (
	jwt "venturex-backend/internal/pkg/jwt"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockJWTService is an autogenerated mock type for the JWTService type
type MockJWTService struct {
	mock.Mock
}

type MockJWTService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJWTService) EXPECT() *MockJWTService_Expecter {
	return &MockJWTService_Expecter{mock: &_m.Mock}
}

// GenerateAccessToken provides a mock function with given fields: userID, username, email, sessionID, fingerprint
func (_m *MockJWTService) GenerateAccessToken(userID int64, username string, email string, sessionID int64, fingerprint string) (jwt.JWT, time.Time, error) {
	ret := _m.Called(userID, username, email, sessionID, fingerprint)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccessToken")
	}

	var r0 jwt.JWT
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(int64, string, string, int64, string) (jwt.JWT, time.Time, error)); ok {
		return rf(userID, username, email, sessionID, fingerprint)
	}
	if rf, ok := ret.Get(0).(func(int64, string, string, int64, string) jwt.JWT); ok {
		r0 = rf(userID, username, email, sessionID, fingerprint)
	} else {
		r0 = ret.Get(0).(jwt.JWT)
	}

	if rf, ok := ret.Get(1).(func(int64, string, string, int64, string) time.Time); ok {
		r1 = rf(userID, username, email, sessionID, fingerprint)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(int64, string, string, int64, string) error); ok {
		r2 = rf(userID, username, email, sessionID, fingerprint)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockJWTService_GenerateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAccessToken'
type MockJWTService_GenerateAccessToken_Call struct {
	*mock.Call
}

// GenerateAccessToken is a helper method to define mock.On call
//   - userID int64
//   - username string
//   - email string
//   - sessionID int64
//   - fingerprint string
func (_e *MockJWTService_Expecter) GenerateAccessToken(userID interface{}, username interface{}, email interface{}, sessionID interface{}, fingerprint interface{}) *MockJWTService_GenerateAccessToken_Call {
	return &MockJWTService_GenerateAccessToken_Call{Call: _e.mock.On("GenerateAccessToken", userID, username, email, sessionID, fingerprint)}
}

func (_c *MockJWTService_GenerateAccessToken_Call) Run(run func(userID int64, username string, email string, sessionID int64, fingerprint string)) *MockJWTService_GenerateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string), args[2].(string), args[3].(int64), args[4].(string))
	})
	return _c
}

func (_c *MockJWTService_GenerateAccessToken_Call) Return(_a0 jwt.JWT, _a1 time.Time, _a2 error) *MockJWTService_GenerateAccessToken_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockJWTService_GenerateAccessToken_Call) RunAndReturn(run func(int64, string, string, int64, string) (jwt.JWT, time.Time, error)) *MockJWTService_GenerateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateRefreshToken provides a mock function with given fields: userID, username, email, sessionID
func (_m *MockJWTService) GenerateRefreshToken(userID int64, username string, email string, sessionID int64) (jwt.JWT, time.Time, error) {
	ret := _m.Called(userID, username, email, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRefreshToken")
	}

	var r0 jwt.JWT
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(int64, string, string, int64) (jwt.JWT, time.Time, error)); ok {
		return rf(userID, username, email, sessionID)
	}
	if rf, ok := ret.Get(0).(func(int64, string, string, int64) jwt.JWT); ok {
		r0 = rf(userID, username, email, sessionID)
	} else {
		r0 = ret.Get(0).(jwt.JWT)
	}

	if rf, ok := ret.Get(1).(func(int64, string, string, int64) time.Time); ok {
		r1 = rf(userID, username, email, sessionID)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(int64, string, string, int64) error); ok {
		r2 = rf(userID, username, email, sessionID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockJWTService_GenerateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRefreshToken'
type MockJWTService_GenerateRefreshToken_Call struct {
	*mock.Call
}

// GenerateRefreshToken is a helper method to define mock.On call
//   - userID int64
//   - username string
//   - email string
//   - sessionID int64
func (_e *MockJWTService_Expecter) GenerateRefreshToken(userID interface{}, username interface{}, email interface{}, sessionID interface{}) *MockJWTService_GenerateRefreshToken_Call {
	return &MockJWTService_GenerateRefreshToken_Call{Call: _e.mock.On("GenerateRefreshToken", userID, username, email, sessionID)}
}

func (_c *MockJWTService_GenerateRefreshToken_Call) Run(run func(userID int64, username string, email string, sessionID int64)) *MockJWTService_GenerateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string), args[2].(string), args[3].(int64))
	})
	return _c
}

func (_c *MockJWTService_GenerateRefreshToken_Call) Return(_a0 jwt.JWT, _a1 time.Time, _a2 error) *MockJWTService_GenerateRefreshToken_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockJWTService_GenerateRefreshToken_Call) RunAndReturn(run func(int64, string, string, int64) (jwt.JWT, time.Time, error)) *MockJWTService_GenerateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenClaims provides a mock function with given fields: token
func (_m *MockJWTService) GetTokenClaims(token string) (*jwt.JWTClaims, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenClaims")
	}

	var r0 *jwt.JWTClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt.JWTClaims, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.JWTClaims); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.JWTClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJWTService_GetTokenClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenClaims'
type MockJWTService_GetTokenClaims_Call struct {
	*mock.Call
}

// GetTokenClaims is a helper method to define mock.On call
//   - token string
func (_e *MockJWTService_Expecter) GetTokenClaims(token interface{}) *MockJWTService_GetTokenClaims_Call {
	return &MockJWTService_GetTokenClaims_Call{Call: _e.mock.On("GetTokenClaims", token)}
}

func (_c *MockJWTService_GetTokenClaims_Call) Run(run func(token string)) *MockJWTService_GetTokenClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJWTService_GetTokenClaims_Call) Return(_a0 *jwt.JWTClaims, _a1 error) *MockJWTService_GetTokenClaims_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJWTService_GetTokenClaims_Call) RunAndReturn(run func(string) (*jwt.JWTClaims, error)) *MockJWTService_GetTokenClaims_Call {
	_c.Call.Return(run)
	return _c
}

// IsTokenExpired provides a mock function with given fields: token
func (_m *MockJWTService) IsTokenExpired(token string) bool {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for IsTokenExpired")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockJWTService_IsTokenExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTokenExpired'
type MockJWTService_IsTokenExpired_Call struct {
	*mock.Call
}

// IsTokenExpired is a helper method to define mock.On call
//   - token string
func (_e *MockJWTService_Expecter) IsTokenExpired(token interface{}) *MockJWTService_IsTokenExpired_Call {
	return &MockJWTService_IsTokenExpired_Call{Call: _e.mock.On("IsTokenExpired", token)}
}

func (_c *MockJWTService_IsTokenExpired_Call) Run(run func(token string)) *MockJWTService_IsTokenExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJWTService_IsTokenExpired_Call) Return(_a0 bool) *MockJWTService_IsTokenExpired_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJWTService_IsTokenExpired_Call) RunAndReturn(run func(string) bool) *MockJWTService_IsTokenExpired_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshAccessToken provides a mock function with given fields: refreshToken
func (_m *MockJWTService) RefreshAccessToken(refreshToken string) (jwt.JWT, time.Time, error) {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshAccessToken")
	}

	var r0 jwt.JWT
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (jwt.JWT, time.Time, error)); ok {
		return rf(refreshToken)
	}
	if rf, ok := ret.Get(0).(func(string) jwt.JWT); ok {
		r0 = rf(refreshToken)
	} else {
		r0 = ret.Get(0).(jwt.JWT)
	}

	if rf, ok := ret.Get(1).(func(string) time.Time); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(refreshToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockJWTService_RefreshAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshAccessToken'
type MockJWTService_RefreshAccessToken_Call struct {
	*mock.Call
}

// RefreshAccessToken is a helper method to define mock.On call
//   - refreshToken string
func (_e *MockJWTService_Expecter) RefreshAccessToken(refreshToken interface{}) *MockJWTService_RefreshAccessToken_Call {
	return &MockJWTService_RefreshAccessToken_Call{Call: _e.mock.On("RefreshAccessToken", refreshToken)}
}

func (_c *MockJWTService_RefreshAccessToken_Call) Run(run func(refreshToken string)) *MockJWTService_RefreshAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJWTService_RefreshAccessToken_Call) Return(_a0 jwt.JWT, _a1 time.Time, _a2 error) *MockJWTService_RefreshAccessToken_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockJWTService_RefreshAccessToken_Call) RunAndReturn(run func(string) (jwt.JWT, time.Time, error)) *MockJWTService_RefreshAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAccessToken provides a mock function with given fields: token
func (_m *MockJWTService) ValidateAccessToken(token string) (*jwt.JWTClaims, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAccessToken")
	}

	var r0 *jwt.JWTClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt.JWTClaims, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.JWTClaims); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.JWTClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJWTService_ValidateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAccessToken'
type MockJWTService_ValidateAccessToken_Call struct {
	*mock.Call
}

// ValidateAccessToken is a helper method to define mock.On call
//   - token string
func (_e *MockJWTService_Expecter) ValidateAccessToken(token interface{}) *MockJWTService_ValidateAccessToken_Call {
	return &MockJWTService_ValidateAccessToken_Call{Call: _e.mock.On("ValidateAccessToken", token)}
}

func (_c *MockJWTService_ValidateAccessToken_Call) Run(run func(token string)) *MockJWTService_ValidateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJWTService_ValidateAccessToken_Call) Return(_a0 *jwt.JWTClaims, _a1 error) *MockJWTService_ValidateAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJWTService_ValidateAccessToken_Call) RunAndReturn(run func(string) (*jwt.JWTClaims, error)) *MockJWTService_ValidateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRefreshToken provides a mock function with given fields: token
func (_m *MockJWTService) ValidateRefreshToken(token string) (*jwt.JWTClaims, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRefreshToken")
	}

	var r0 *jwt.JWTClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt.JWTClaims, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.JWTClaims); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.JWTClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJWTService_ValidateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRefreshToken'
type MockJWTService_ValidateRefreshToken_Call struct {
	*mock.Call
}

// ValidateRefreshToken is a helper method to define mock.On call
//   - token string
func (_e *MockJWTService_Expecter) ValidateRefreshToken(token interface{}) *MockJWTService_ValidateRefreshToken_Call {
	return &MockJWTService_ValidateRefreshToken_Call{Call: _e.mock.On("ValidateRefreshToken", token)}
}

func (_c *MockJWTService_ValidateRefreshToken_Call) Run(run func(token string)) *MockJWTService_ValidateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJWTService_ValidateRefreshToken_Call) Return(_a0 *jwt.JWTClaims, _a1 error) *MockJWTService_ValidateRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJWTService_ValidateRefreshToken_Call) RunAndReturn(run func(string) (*jwt.JWTClaims, error)) *MockJWTService_ValidateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: token
func (_m *MockJWTService) ValidateToken(token string) (*jwt.JWTClaims, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *jwt.JWTClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt.JWTClaims, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.JWTClaims); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.JWTClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJWTService_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockJWTService_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - token string
func (_e *MockJWTService_Expecter) ValidateToken(token interface{}) *MockJWTService_ValidateToken_Call {
	return &MockJWTService_ValidateToken_Call{Call: _e.mock.On("ValidateToken", token)}
}

func (_c *MockJWTService_ValidateToken_Call) Run(run func(token string)) *MockJWTService_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJWTService_ValidateToken_Call) Return(_a0 *jwt.JWTClaims, _a1 error) *MockJWTService_ValidateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJWTService_ValidateToken_Call) RunAndReturn(run func(string) (*jwt.JWTClaims, error)) *MockJWTService_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJWTService creates a new instance of MockJWTService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJWTService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJWTService {
	mock := &MockJWTService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
