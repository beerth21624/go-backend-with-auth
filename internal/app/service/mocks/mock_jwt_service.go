// Code generated by mockery v2.53.4. DO NOT EDIT.

package service

import (
	domain "beerdosan-backend/internal/app/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockJWTService is an autogenerated mock type for the JWTService type
type MockJWTService struct {
	mock.Mock
}

type MockJWTService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJWTService) EXPECT() *MockJWTService_Expecter {
	return &MockJWTService_Expecter{mock: &_m.Mock}
}

// GenerateAccessToken provides a mock function with given fields: userID, sessionID, role
func (_m *MockJWTService) GenerateAccessToken(userID domain.UserID, sessionID domain.SessionID, role domain.UserRole) (domain.JWT, error) {
	ret := _m.Called(userID, sessionID, role)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccessToken")
	}

	var r0 domain.JWT
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.UserID, domain.SessionID, domain.UserRole) (domain.JWT, error)); ok {
		return rf(userID, sessionID, role)
	}
	if rf, ok := ret.Get(0).(func(domain.UserID, domain.SessionID, domain.UserRole) domain.JWT); ok {
		r0 = rf(userID, sessionID, role)
	} else {
		r0 = ret.Get(0).(domain.JWT)
	}

	if rf, ok := ret.Get(1).(func(domain.UserID, domain.SessionID, domain.UserRole) error); ok {
		r1 = rf(userID, sessionID, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJWTService_GenerateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAccessToken'
type MockJWTService_GenerateAccessToken_Call struct {
	*mock.Call
}

// GenerateAccessToken is a helper method to define mock.On call
//   - userID domain.UserID
//   - sessionID domain.SessionID
//   - role domain.UserRole
func (_e *MockJWTService_Expecter) GenerateAccessToken(userID interface{}, sessionID interface{}, role interface{}) *MockJWTService_GenerateAccessToken_Call {
	return &MockJWTService_GenerateAccessToken_Call{Call: _e.mock.On("GenerateAccessToken", userID, sessionID, role)}
}

func (_c *MockJWTService_GenerateAccessToken_Call) Run(run func(userID domain.UserID, sessionID domain.SessionID, role domain.UserRole)) *MockJWTService_GenerateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.UserID), args[1].(domain.SessionID), args[2].(domain.UserRole))
	})
	return _c
}

func (_c *MockJWTService_GenerateAccessToken_Call) Return(_a0 domain.JWT, _a1 error) *MockJWTService_GenerateAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJWTService_GenerateAccessToken_Call) RunAndReturn(run func(domain.UserID, domain.SessionID, domain.UserRole) (domain.JWT, error)) *MockJWTService_GenerateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateRefreshToken provides a mock function with given fields: userID, sessionID
func (_m *MockJWTService) GenerateRefreshToken(userID domain.UserID, sessionID domain.SessionID) (domain.JWT, error) {
	ret := _m.Called(userID, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRefreshToken")
	}

	var r0 domain.JWT
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.UserID, domain.SessionID) (domain.JWT, error)); ok {
		return rf(userID, sessionID)
	}
	if rf, ok := ret.Get(0).(func(domain.UserID, domain.SessionID) domain.JWT); ok {
		r0 = rf(userID, sessionID)
	} else {
		r0 = ret.Get(0).(domain.JWT)
	}

	if rf, ok := ret.Get(1).(func(domain.UserID, domain.SessionID) error); ok {
		r1 = rf(userID, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJWTService_GenerateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRefreshToken'
type MockJWTService_GenerateRefreshToken_Call struct {
	*mock.Call
}

// GenerateRefreshToken is a helper method to define mock.On call
//   - userID domain.UserID
//   - sessionID domain.SessionID
func (_e *MockJWTService_Expecter) GenerateRefreshToken(userID interface{}, sessionID interface{}) *MockJWTService_GenerateRefreshToken_Call {
	return &MockJWTService_GenerateRefreshToken_Call{Call: _e.mock.On("GenerateRefreshToken", userID, sessionID)}
}

func (_c *MockJWTService_GenerateRefreshToken_Call) Run(run func(userID domain.UserID, sessionID domain.SessionID)) *MockJWTService_GenerateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.UserID), args[1].(domain.SessionID))
	})
	return _c
}

func (_c *MockJWTService_GenerateRefreshToken_Call) Return(_a0 domain.JWT, _a1 error) *MockJWTService_GenerateRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJWTService_GenerateRefreshToken_Call) RunAndReturn(run func(domain.UserID, domain.SessionID) (domain.JWT, error)) *MockJWTService_GenerateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshAccessToken provides a mock function with given fields: refreshToken
func (_m *MockJWTService) RefreshAccessToken(refreshToken domain.JWT) (domain.JWT, error) {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshAccessToken")
	}

	var r0 domain.JWT
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.JWT) (domain.JWT, error)); ok {
		return rf(refreshToken)
	}
	if rf, ok := ret.Get(0).(func(domain.JWT) domain.JWT); ok {
		r0 = rf(refreshToken)
	} else {
		r0 = ret.Get(0).(domain.JWT)
	}

	if rf, ok := ret.Get(1).(func(domain.JWT) error); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJWTService_RefreshAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshAccessToken'
type MockJWTService_RefreshAccessToken_Call struct {
	*mock.Call
}

// RefreshAccessToken is a helper method to define mock.On call
//   - refreshToken domain.JWT
func (_e *MockJWTService_Expecter) RefreshAccessToken(refreshToken interface{}) *MockJWTService_RefreshAccessToken_Call {
	return &MockJWTService_RefreshAccessToken_Call{Call: _e.mock.On("RefreshAccessToken", refreshToken)}
}

func (_c *MockJWTService_RefreshAccessToken_Call) Run(run func(refreshToken domain.JWT)) *MockJWTService_RefreshAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.JWT))
	})
	return _c
}

func (_c *MockJWTService_RefreshAccessToken_Call) Return(_a0 domain.JWT, _a1 error) *MockJWTService_RefreshAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJWTService_RefreshAccessToken_Call) RunAndReturn(run func(domain.JWT) (domain.JWT, error)) *MockJWTService_RefreshAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeToken provides a mock function with given fields: token
func (_m *MockJWTService) RevokeToken(token domain.JWT) error {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for RevokeToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.JWT) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJWTService_RevokeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeToken'
type MockJWTService_RevokeToken_Call struct {
	*mock.Call
}

// RevokeToken is a helper method to define mock.On call
//   - token domain.JWT
func (_e *MockJWTService_Expecter) RevokeToken(token interface{}) *MockJWTService_RevokeToken_Call {
	return &MockJWTService_RevokeToken_Call{Call: _e.mock.On("RevokeToken", token)}
}

func (_c *MockJWTService_RevokeToken_Call) Run(run func(token domain.JWT)) *MockJWTService_RevokeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.JWT))
	})
	return _c
}

func (_c *MockJWTService_RevokeToken_Call) Return(_a0 error) *MockJWTService_RevokeToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJWTService_RevokeToken_Call) RunAndReturn(run func(domain.JWT) error) *MockJWTService_RevokeToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: token
func (_m *MockJWTService) ValidateToken(token domain.JWT) (*domain.TokenClaims, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *domain.TokenClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.JWT) (*domain.TokenClaims, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(domain.JWT) *domain.TokenClaims); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.TokenClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.JWT) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJWTService_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockJWTService_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - token domain.JWT
func (_e *MockJWTService_Expecter) ValidateToken(token interface{}) *MockJWTService_ValidateToken_Call {
	return &MockJWTService_ValidateToken_Call{Call: _e.mock.On("ValidateToken", token)}
}

func (_c *MockJWTService_ValidateToken_Call) Run(run func(token domain.JWT)) *MockJWTService_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.JWT))
	})
	return _c
}

func (_c *MockJWTService_ValidateToken_Call) Return(_a0 *domain.TokenClaims, _a1 error) *MockJWTService_ValidateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJWTService_ValidateToken_Call) RunAndReturn(run func(domain.JWT) (*domain.TokenClaims, error)) *MockJWTService_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJWTService creates a new instance of MockJWTService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJWTService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJWTService {
	mock := &MockJWTService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
