// Code generated by mockery v2.53.4. DO NOT EDIT.

package service

import (
	domain "beerdosan-backend/internal/app/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockPasswordService is an autogenerated mock type for the PasswordService type
type MockPasswordService struct {
	mock.Mock
}

type MockPasswordService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPasswordService) EXPECT() *MockPasswordService_Expecter {
	return &MockPasswordService_Expecter{mock: &_m.Mock}
}

// GenerateRandomPassword provides a mock function with given fields: length
func (_m *MockPasswordService) GenerateRandomPassword(length int) (string, error) {
	ret := _m.Called(length)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRandomPassword")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (string, error)); ok {
		return rf(length)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(length)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(length)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPasswordService_GenerateRandomPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRandomPassword'
type MockPasswordService_GenerateRandomPassword_Call struct {
	*mock.Call
}

// GenerateRandomPassword is a helper method to define mock.On call
//   - length int
func (_e *MockPasswordService_Expecter) GenerateRandomPassword(length interface{}) *MockPasswordService_GenerateRandomPassword_Call {
	return &MockPasswordService_GenerateRandomPassword_Call{Call: _e.mock.On("GenerateRandomPassword", length)}
}

func (_c *MockPasswordService_GenerateRandomPassword_Call) Run(run func(length int)) *MockPasswordService_GenerateRandomPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockPasswordService_GenerateRandomPassword_Call) Return(_a0 string, _a1 error) *MockPasswordService_GenerateRandomPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPasswordService_GenerateRandomPassword_Call) RunAndReturn(run func(int) (string, error)) *MockPasswordService_GenerateRandomPassword_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateSecureToken provides a mock function with given fields: length
func (_m *MockPasswordService) GenerateSecureToken(length int) (string, error) {
	ret := _m.Called(length)

	if len(ret) == 0 {
		panic("no return value specified for GenerateSecureToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (string, error)); ok {
		return rf(length)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(length)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(length)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPasswordService_GenerateSecureToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateSecureToken'
type MockPasswordService_GenerateSecureToken_Call struct {
	*mock.Call
}

// GenerateSecureToken is a helper method to define mock.On call
//   - length int
func (_e *MockPasswordService_Expecter) GenerateSecureToken(length interface{}) *MockPasswordService_GenerateSecureToken_Call {
	return &MockPasswordService_GenerateSecureToken_Call{Call: _e.mock.On("GenerateSecureToken", length)}
}

func (_c *MockPasswordService_GenerateSecureToken_Call) Run(run func(length int)) *MockPasswordService_GenerateSecureToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockPasswordService_GenerateSecureToken_Call) Return(_a0 string, _a1 error) *MockPasswordService_GenerateSecureToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPasswordService_GenerateSecureToken_Call) RunAndReturn(run func(int) (string, error)) *MockPasswordService_GenerateSecureToken_Call {
	_c.Call.Return(run)
	return _c
}

// Hash provides a mock function with given fields: password
func (_m *MockPasswordService) Hash(password string) (domain.HashedPassword, error) {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 domain.HashedPassword
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.HashedPassword, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) domain.HashedPassword); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(domain.HashedPassword)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPasswordService_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type MockPasswordService_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
//   - password string
func (_e *MockPasswordService_Expecter) Hash(password interface{}) *MockPasswordService_Hash_Call {
	return &MockPasswordService_Hash_Call{Call: _e.mock.On("Hash", password)}
}

func (_c *MockPasswordService_Hash_Call) Run(run func(password string)) *MockPasswordService_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPasswordService_Hash_Call) Return(_a0 domain.HashedPassword, _a1 error) *MockPasswordService_Hash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPasswordService_Hash_Call) RunAndReturn(run func(string) (domain.HashedPassword, error)) *MockPasswordService_Hash_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateStrength provides a mock function with given fields: password
func (_m *MockPasswordService) ValidateStrength(password string) error {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for ValidateStrength")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPasswordService_ValidateStrength_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateStrength'
type MockPasswordService_ValidateStrength_Call struct {
	*mock.Call
}

// ValidateStrength is a helper method to define mock.On call
//   - password string
func (_e *MockPasswordService_Expecter) ValidateStrength(password interface{}) *MockPasswordService_ValidateStrength_Call {
	return &MockPasswordService_ValidateStrength_Call{Call: _e.mock.On("ValidateStrength", password)}
}

func (_c *MockPasswordService_ValidateStrength_Call) Run(run func(password string)) *MockPasswordService_ValidateStrength_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPasswordService_ValidateStrength_Call) Return(_a0 error) *MockPasswordService_ValidateStrength_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPasswordService_ValidateStrength_Call) RunAndReturn(run func(string) error) *MockPasswordService_ValidateStrength_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: password, hashedPassword
func (_m *MockPasswordService) Verify(password string, hashedPassword domain.HashedPassword) error {
	ret := _m.Called(password, hashedPassword)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, domain.HashedPassword) error); ok {
		r0 = rf(password, hashedPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPasswordService_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type MockPasswordService_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - password string
//   - hashedPassword domain.HashedPassword
func (_e *MockPasswordService_Expecter) Verify(password interface{}, hashedPassword interface{}) *MockPasswordService_Verify_Call {
	return &MockPasswordService_Verify_Call{Call: _e.mock.On("Verify", password, hashedPassword)}
}

func (_c *MockPasswordService_Verify_Call) Run(run func(password string, hashedPassword domain.HashedPassword)) *MockPasswordService_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(domain.HashedPassword))
	})
	return _c
}

func (_c *MockPasswordService_Verify_Call) Return(_a0 error) *MockPasswordService_Verify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPasswordService_Verify_Call) RunAndReturn(run func(string, domain.HashedPassword) error) *MockPasswordService_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPasswordService creates a new instance of MockPasswordService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPasswordService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPasswordService {
	mock := &MockPasswordService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
