// Code generated by mockery v2.53.4. DO NOT EDIT.

package repositories

import (
	context "context"
	domain "beerdosan-backend/internal/app/domain"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// MockSessionRepository is an autogenerated mock type for the SessionRepository type
type MockSessionRepository struct {
	mock.Mock
}

type MockSessionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionRepository) EXPECT() *MockSessionRepository_Expecter {
	return &MockSessionRepository_Expecter{mock: &_m.Mock}
}

// CleanupExpiredSessions provides a mock function with given fields: ctx
func (_m *MockSessionRepository) CleanupExpiredSessions(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CleanupExpiredSessions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionRepository_CleanupExpiredSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanupExpiredSessions'
type MockSessionRepository_CleanupExpiredSessions_Call struct {
	*mock.Call
}

// CleanupExpiredSessions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSessionRepository_Expecter) CleanupExpiredSessions(ctx interface{}) *MockSessionRepository_CleanupExpiredSessions_Call {
	return &MockSessionRepository_CleanupExpiredSessions_Call{Call: _e.mock.On("CleanupExpiredSessions", ctx)}
}

func (_c *MockSessionRepository_CleanupExpiredSessions_Call) Run(run func(ctx context.Context)) *MockSessionRepository_CleanupExpiredSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSessionRepository_CleanupExpiredSessions_Call) Return(_a0 error) *MockSessionRepository_CleanupExpiredSessions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionRepository_CleanupExpiredSessions_Call) RunAndReturn(run func(context.Context) error) *MockSessionRepository_CleanupExpiredSessions_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, session
func (_m *MockSessionRepository) Create(ctx context.Context, session *domain.Session) (*domain.Session, error) {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Session) (*domain.Session, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Session) *domain.Session); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Session) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSessionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - session *domain.Session
func (_e *MockSessionRepository_Expecter) Create(ctx interface{}, session interface{}) *MockSessionRepository_Create_Call {
	return &MockSessionRepository_Create_Call{Call: _e.mock.On("Create", ctx, session)}
}

func (_c *MockSessionRepository_Create_Call) Run(run func(ctx context.Context, session *domain.Session)) *MockSessionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Session))
	})
	return _c
}

func (_c *MockSessionRepository_Create_Call) Return(_a0 *domain.Session, _a1 error) *MockSessionRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionRepository_Create_Call) RunAndReturn(run func(context.Context, *domain.Session) (*domain.Session, error)) *MockSessionRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateInTx provides a mock function with given fields: tx, session
func (_m *MockSessionRepository) CreateInTx(tx *gorm.DB, session *domain.Session) (*domain.Session, error) {
	ret := _m.Called(tx, session)

	if len(ret) == 0 {
		panic("no return value specified for CreateInTx")
	}

	var r0 *domain.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *domain.Session) (*domain.Session, error)); ok {
		return rf(tx, session)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, *domain.Session) *domain.Session); ok {
		r0 = rf(tx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, *domain.Session) error); ok {
		r1 = rf(tx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionRepository_CreateInTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInTx'
type MockSessionRepository_CreateInTx_Call struct {
	*mock.Call
}

// CreateInTx is a helper method to define mock.On call
//   - tx *gorm.DB
//   - session *domain.Session
func (_e *MockSessionRepository_Expecter) CreateInTx(tx interface{}, session interface{}) *MockSessionRepository_CreateInTx_Call {
	return &MockSessionRepository_CreateInTx_Call{Call: _e.mock.On("CreateInTx", tx, session)}
}

func (_c *MockSessionRepository_CreateInTx_Call) Run(run func(tx *gorm.DB, session *domain.Session)) *MockSessionRepository_CreateInTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*domain.Session))
	})
	return _c
}

func (_c *MockSessionRepository_CreateInTx_Call) Return(_a0 *domain.Session, _a1 error) *MockSessionRepository_CreateInTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionRepository_CreateInTx_Call) RunAndReturn(run func(*gorm.DB, *domain.Session) (*domain.Session, error)) *MockSessionRepository_CreateInTx_Call {
	_c.Call.Return(run)
	return _c
}

// FindByRefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *MockSessionRepository) FindByRefreshToken(ctx context.Context, refreshToken string) (*domain.Session, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for FindByRefreshToken")
	}

	var r0 *domain.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Session, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Session); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionRepository_FindByRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByRefreshToken'
type MockSessionRepository_FindByRefreshToken_Call struct {
	*mock.Call
}

// FindByRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *MockSessionRepository_Expecter) FindByRefreshToken(ctx interface{}, refreshToken interface{}) *MockSessionRepository_FindByRefreshToken_Call {
	return &MockSessionRepository_FindByRefreshToken_Call{Call: _e.mock.On("FindByRefreshToken", ctx, refreshToken)}
}

func (_c *MockSessionRepository_FindByRefreshToken_Call) Run(run func(ctx context.Context, refreshToken string)) *MockSessionRepository_FindByRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessionRepository_FindByRefreshToken_Call) Return(_a0 *domain.Session, _a1 error) *MockSessionRepository_FindByRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionRepository_FindByRefreshToken_Call) RunAndReturn(run func(context.Context, string) (*domain.Session, error)) *MockSessionRepository_FindByRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveSessionsByUserID provides a mock function with given fields: ctx, userID
func (_m *MockSessionRepository) GetActiveSessionsByUserID(ctx context.Context, userID domain.UserID) ([]*domain.Session, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveSessionsByUserID")
	}

	var r0 []*domain.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) ([]*domain.Session, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) []*domain.Session); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionRepository_GetActiveSessionsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveSessionsByUserID'
type MockSessionRepository_GetActiveSessionsByUserID_Call struct {
	*mock.Call
}

// GetActiveSessionsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID domain.UserID
func (_e *MockSessionRepository_Expecter) GetActiveSessionsByUserID(ctx interface{}, userID interface{}) *MockSessionRepository_GetActiveSessionsByUserID_Call {
	return &MockSessionRepository_GetActiveSessionsByUserID_Call{Call: _e.mock.On("GetActiveSessionsByUserID", ctx, userID)}
}

func (_c *MockSessionRepository_GetActiveSessionsByUserID_Call) Run(run func(ctx context.Context, userID domain.UserID)) *MockSessionRepository_GetActiveSessionsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID))
	})
	return _c
}

func (_c *MockSessionRepository_GetActiveSessionsByUserID_Call) Return(_a0 []*domain.Session, _a1 error) *MockSessionRepository_GetActiveSessionsByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionRepository_GetActiveSessionsByUserID_Call) RunAndReturn(run func(context.Context, domain.UserID) ([]*domain.Session, error)) *MockSessionRepository_GetActiveSessionsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBySessionID provides a mock function with given fields: ctx, sessionID
func (_m *MockSessionRepository) GetBySessionID(ctx context.Context, sessionID domain.SessionID) (*domain.Session, error) {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for GetBySessionID")
	}

	var r0 *domain.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SessionID) (*domain.Session, error)); ok {
		return rf(ctx, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SessionID) *domain.Session); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SessionID) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionRepository_GetBySessionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySessionID'
type MockSessionRepository_GetBySessionID_Call struct {
	*mock.Call
}

// GetBySessionID is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID domain.SessionID
func (_e *MockSessionRepository_Expecter) GetBySessionID(ctx interface{}, sessionID interface{}) *MockSessionRepository_GetBySessionID_Call {
	return &MockSessionRepository_GetBySessionID_Call{Call: _e.mock.On("GetBySessionID", ctx, sessionID)}
}

func (_c *MockSessionRepository_GetBySessionID_Call) Run(run func(ctx context.Context, sessionID domain.SessionID)) *MockSessionRepository_GetBySessionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SessionID))
	})
	return _c
}

func (_c *MockSessionRepository_GetBySessionID_Call) Return(_a0 *domain.Session, _a1 error) *MockSessionRepository_GetBySessionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionRepository_GetBySessionID_Call) RunAndReturn(run func(context.Context, domain.SessionID) (*domain.Session, error)) *MockSessionRepository_GetBySessionID_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateAllUserSessions provides a mock function with given fields: ctx, userID, excludeSessionID
func (_m *MockSessionRepository) InvalidateAllUserSessions(ctx context.Context, userID domain.UserID, excludeSessionID domain.SessionID) error {
	ret := _m.Called(ctx, userID, excludeSessionID)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateAllUserSessions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, domain.SessionID) error); ok {
		r0 = rf(ctx, userID, excludeSessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionRepository_InvalidateAllUserSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateAllUserSessions'
type MockSessionRepository_InvalidateAllUserSessions_Call struct {
	*mock.Call
}

// InvalidateAllUserSessions is a helper method to define mock.On call
//   - ctx context.Context
//   - userID domain.UserID
//   - excludeSessionID domain.SessionID
func (_e *MockSessionRepository_Expecter) InvalidateAllUserSessions(ctx interface{}, userID interface{}, excludeSessionID interface{}) *MockSessionRepository_InvalidateAllUserSessions_Call {
	return &MockSessionRepository_InvalidateAllUserSessions_Call{Call: _e.mock.On("InvalidateAllUserSessions", ctx, userID, excludeSessionID)}
}

func (_c *MockSessionRepository_InvalidateAllUserSessions_Call) Run(run func(ctx context.Context, userID domain.UserID, excludeSessionID domain.SessionID)) *MockSessionRepository_InvalidateAllUserSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(domain.SessionID))
	})
	return _c
}

func (_c *MockSessionRepository_InvalidateAllUserSessions_Call) Return(_a0 error) *MockSessionRepository_InvalidateAllUserSessions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionRepository_InvalidateAllUserSessions_Call) RunAndReturn(run func(context.Context, domain.UserID, domain.SessionID) error) *MockSessionRepository_InvalidateAllUserSessions_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateSession provides a mock function with given fields: ctx, sessionID
func (_m *MockSessionRepository) InvalidateSession(ctx context.Context, sessionID domain.SessionID) error {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SessionID) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionRepository_InvalidateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateSession'
type MockSessionRepository_InvalidateSession_Call struct {
	*mock.Call
}

// InvalidateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID domain.SessionID
func (_e *MockSessionRepository_Expecter) InvalidateSession(ctx interface{}, sessionID interface{}) *MockSessionRepository_InvalidateSession_Call {
	return &MockSessionRepository_InvalidateSession_Call{Call: _e.mock.On("InvalidateSession", ctx, sessionID)}
}

func (_c *MockSessionRepository_InvalidateSession_Call) Run(run func(ctx context.Context, sessionID domain.SessionID)) *MockSessionRepository_InvalidateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SessionID))
	})
	return _c
}

func (_c *MockSessionRepository_InvalidateSession_Call) Return(_a0 error) *MockSessionRepository_InvalidateSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionRepository_InvalidateSession_Call) RunAndReturn(run func(context.Context, domain.SessionID) error) *MockSessionRepository_InvalidateSession_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, session
func (_m *MockSessionRepository) Update(ctx context.Context, session *domain.Session) error {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSessionRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - session *domain.Session
func (_e *MockSessionRepository_Expecter) Update(ctx interface{}, session interface{}) *MockSessionRepository_Update_Call {
	return &MockSessionRepository_Update_Call{Call: _e.mock.On("Update", ctx, session)}
}

func (_c *MockSessionRepository_Update_Call) Run(run func(ctx context.Context, session *domain.Session)) *MockSessionRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Session))
	})
	return _c
}

func (_c *MockSessionRepository_Update_Call) Return(_a0 error) *MockSessionRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionRepository_Update_Call) RunAndReturn(run func(context.Context, *domain.Session) error) *MockSessionRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInTx provides a mock function with given fields: tx, session
func (_m *MockSessionRepository) UpdateInTx(tx *gorm.DB, session *domain.Session) error {
	ret := _m.Called(tx, session)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *domain.Session) error); ok {
		r0 = rf(tx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionRepository_UpdateInTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInTx'
type MockSessionRepository_UpdateInTx_Call struct {
	*mock.Call
}

// UpdateInTx is a helper method to define mock.On call
//   - tx *gorm.DB
//   - session *domain.Session
func (_e *MockSessionRepository_Expecter) UpdateInTx(tx interface{}, session interface{}) *MockSessionRepository_UpdateInTx_Call {
	return &MockSessionRepository_UpdateInTx_Call{Call: _e.mock.On("UpdateInTx", tx, session)}
}

func (_c *MockSessionRepository_UpdateInTx_Call) Run(run func(tx *gorm.DB, session *domain.Session)) *MockSessionRepository_UpdateInTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*domain.Session))
	})
	return _c
}

func (_c *MockSessionRepository_UpdateInTx_Call) Return(_a0 error) *MockSessionRepository_UpdateInTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionRepository_UpdateInTx_Call) RunAndReturn(run func(*gorm.DB, *domain.Session) error) *MockSessionRepository_UpdateInTx_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLastActivity provides a mock function with given fields: ctx, sessionID
func (_m *MockSessionRepository) UpdateLastActivity(ctx context.Context, sessionID domain.SessionID) error {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastActivity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SessionID) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionRepository_UpdateLastActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLastActivity'
type MockSessionRepository_UpdateLastActivity_Call struct {
	*mock.Call
}

// UpdateLastActivity is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID domain.SessionID
func (_e *MockSessionRepository_Expecter) UpdateLastActivity(ctx interface{}, sessionID interface{}) *MockSessionRepository_UpdateLastActivity_Call {
	return &MockSessionRepository_UpdateLastActivity_Call{Call: _e.mock.On("UpdateLastActivity", ctx, sessionID)}
}

func (_c *MockSessionRepository_UpdateLastActivity_Call) Run(run func(ctx context.Context, sessionID domain.SessionID)) *MockSessionRepository_UpdateLastActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SessionID))
	})
	return _c
}

func (_c *MockSessionRepository_UpdateLastActivity_Call) Return(_a0 error) *MockSessionRepository_UpdateLastActivity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionRepository_UpdateLastActivity_Call) RunAndReturn(run func(context.Context, domain.SessionID) error) *MockSessionRepository_UpdateLastActivity_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessionRepository creates a new instance of MockSessionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionRepository {
	mock := &MockSessionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
